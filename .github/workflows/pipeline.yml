name: Terraform e Ansible CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform_ansible_k3s:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -input=false

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan -input=false

      - name: Terraform Apply
        id: apply
        run: |
          cd terraform
          terraform apply -auto-approve -input=false tfplan
          echo "Apply concluído com status: $?"

      - name: Verificar se a instância foi criada
        run: |
          cd terraform
          echo "=== VERIFICANDO STATE ==="
          terraform state list
          echo "=== VERIFICANDO INSTÂNCIA ==="
          terraform show

      - name: Obter IP da instância (método simples)
        id: get_ip
        run: |
          cd terraform
          # Método direto sem jq
          INSTANCE_IP=$(terraform output ec2_public_ip | tr -d '"')
          echo "IP bruto: $(terraform output ec2_public_ip)"
          echo "IP processado: $INSTANCE_IP"
          
          if [ -z "$INSTANCE_IP" ] || [ "$INSTANCE_IP" = "null" ]; then
            echo "ERRO: Não foi possível obter o IP"
            echo "Tentando método alternativo..."
            # Método alternativo
            INSTANCE_IP=$(terraform show | grep "public_ip" | head -1 | awk '{print $3}' | tr -d '"')
            echo "IP alternativo: $INSTANCE_IP"
          fi
          
          if [ -z "$INSTANCE_IP" ] || [ "$INSTANCE_IP" = "null" ]; then
            echo "ERRO CRÍTICO: Instância não foi criada ou não tem IP público"
            exit 1
          fi
          
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT

      - name: Debug - Verificar IP
        run: |
          echo "IP capturado: ${{ steps.get_ip.outputs.instance_ip }}"

      - name: Aguardar instância ficar disponível
        run: |
          IP="${{ steps.get_ip.outputs.instance_ip }}"
          echo "Aguardando SSH em $IP..."
          for i in {1..30}; do
            if nc -z -w 5 $IP 22; then
              echo "SSH disponível!"
              break
            fi
            echo "Tentativa $i/30 - aguardando..."
            sleep 10
          done

      - name: Configurar chave SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Testar conexão SSH
        run: |
          IP="${{ steps.get_ip.outputs.instance_ip }}"
          ssh-keyscan -H $IP >> ~/.ssh/known_hosts
          ssh -i key.pem -o ConnectTimeout=10 ubuntu@$IP "echo 'Conexão SSH bem-sucedida!'" || echo "Teste SSH falhou, continuando..."

      - name: Criar inventário Ansible
        run: |
          IP="${{ steps.get_ip.outputs.instance_ip }}"
          echo "[k3s_node]" > ansible_hosts
          echo "$IP ansible_user=ubuntu ansible_ssh_private_key_file=./key.pem" >> ansible_hosts
          echo "Conteúdo do inventário:"
          cat ansible_hosts

      - name: Executar playbook Ansible
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.get_ip.outputs.instance_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Instalar Python3 primeiro (necessário para Ansible)
            sudo apt-get update
            sudo apt-get install -y python3
            # Executar playbook
            ansible-playbook -i /github/workspace/ansible_hosts /github/workspace/playbook.yml

      - name: Limpeza
        if: always()
        run: |
          rm -f key.pem ansible_hosts