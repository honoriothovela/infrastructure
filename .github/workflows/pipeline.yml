name: Terraform e Ansible CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform_ansible_k3s:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3

      # 🔑 Login no DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 🐳 Build e Push da imagem Go para o DockerHub
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/minha-app:latest

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -input=false

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan -input=false

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve -input=false tfplan

      - name: Obter IP da instância
        id: get_ip
        run: |
          cd terraform
          RAW_OUTPUT=$(terraform output ec2_public_ip 2>&1)
          INSTANCE_IP=$(echo "$RAW_OUTPUT" | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT

      - name: Aguardar instância ficar disponível
        run: |
          IP="${{ steps.get_ip.outputs.instance_ip }}"
          echo "Aguardando SSH em $IP..."
          for i in {1..30}; do
            if nc -z -w 5 $IP 22; then
              echo "SSH disponível!"
              break
            fi
            echo "Tentativa $i/30 - aguardando..."
            sleep 10
          done

      - name: Configurar chave SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Criar inventário Ansible
        run: |
          IP="${{ steps.get_ip.outputs.instance_ip }}"
          echo "[k3s_node]" > ansible_hosts
          echo "$IP ansible_user=ubuntu ansible_ssh_private_key_file=./key.pem" >> ansible_hosts
          echo "📋 Conteúdo do inventário:"
          cat ansible_hosts

      - name: Criar playbook Ansible
        run: |
          cat > playbook.yml << 'EOF'
---
- name: Instalar e configurar K3s
  hosts: k3s_node
  become: yes
  gather_facts: yes

  tasks:
    - name: Atualizar cache de pacotes
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Instalar dependências
      apt:
        name:
          - curl
          - apt-transport-https
        state: present

    - name: Instalar K3s
      shell: |
        curl -sfL https://get.k3s.io | sh -
      args:
        creates: /usr/local/bin/k3s

    - name: Verificar instalação do K3s
      command: k3s --version
      register: k3s_version
      changed_when: false

    - name: Mostrar versão do K3s
      debug:
        msg: "K3s instalado: {{ k3s_version.stdout }}"

    - name: Verificar status do serviço K3s
      systemd:
        name: k3s
        state: started
        enabled: yes

    - name: Verificar nodes do cluster
      command: sudo k3s kubectl get nodes
      register: k3s_nodes
      changed_when: false

    - name: Mostrar status dos nodes
      debug:
        msg: "Nodes do cluster: {{ k3s_nodes.stdout }}"
EOF

          echo "📋 Playbook criado:"
          cat playbook.yml

      - name: Instalar Ansible no executor do GitHub
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo apt-add-repository --yes --update ppa:ansible/ansible
          sudo apt-get install -y ansible
          echo "✅ Ansible instalado no executor:"
          ansible --version

      - name: Configurar known_hosts para SSH
        run: |
          IP="${{ steps.get_ip.outputs.instance_ip }}"
          ssh-keyscan -H $IP >> ~/.ssh/known_hosts

      - name: Executar playbook Ansible diretamente no executor
        run: |
          ansible-playbook -i ansible_hosts playbook.yml --private-key=key.pem
          echo "✅ Playbook executado com sucesso!"

      - name: Limpeza
        if: always()
        run: |
          rm -f key.pem ansible_hosts playbook.yml
