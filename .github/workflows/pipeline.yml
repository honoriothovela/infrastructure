name: Terraform e Ansible CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform_ansible_k3s:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -input=false

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan -input=false

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve -input=false tfplan

      - name: Obter IP da instância (FILTRAR APENAS O NÚMERO)
        id: get_ip
        run: |
          cd terraform
          RAW_OUTPUT=$(terraform output ec2_public_ip 2>&1)
          echo "Output completo: $RAW_OUTPUT"
          INSTANCE_IP=$(echo "$RAW_OUTPUT" | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "IP filtrado: $INSTANCE_IP"
          if [[ $INSTANCE_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "✅ IP válido: $INSTANCE_IP"
            echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          else
            echo "❌ ERRO: IP inválido - $INSTANCE_IP"
            echo "Tentando método alternativo..."
            INSTANCE_IP_ALT=$(echo "$RAW_OUTPUT" | tail -1 | tr -d '" ' | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
            echo "IP alternativo: $INSTANCE_IP_ALT"
            if [[ $INSTANCE_IP_ALT =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "instance_ip=$INSTANCE_IP_ALT" >> $GITHUB_OUTPUT
            else
              echo "❌ TODOS OS MÉTODOS FALHARAM"
              exit 1
            fi
          fi

      - name: Verificar IP capturado
        run: |
          echo "✅ IP capturado: ${{ steps.get_ip.outputs.instance_ip }}"

      - name: Aguardar instância ficar disponível
        run: |
          IP="${{ steps.get_ip.outputs.instance_ip }}"
          echo "🕐 Aguardando SSH em $IP..."
          for i in {1..30}; do
            if nc -z -w 5 $IP 22; then
              echo "✅ SSH disponível!"
              break
            fi
            echo "Tentativa $i/30 - aguardando..."
            sleep 10
          done

      - name: Configurar chave SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Criar inventário Ansible
        run: |
          IP="${{ steps.get_ip.outputs.instance_ip }}"
          echo "[k3s_node]" > ansible_hosts
          echo "$IP ansible_user=ubuntu ansible_ssh_private_key_file=./key.pem" >> ansible_hosts
          echo "📋 Conteúdo do inventário:"
          cat ansible_hosts

      - name: Criar playbook Ansible localmente
        run: |
          cat > k3s_install.yml << 'EOF'
          - name: Instalar k3s
            hosts: k3s_node
            become: yes
            tasks:
              - name: Atualizar sistema
                apt:
                  update_cache: yes

              - name: Instalar dependências
                apt:
                  name: curl
                  state: present

              - name: Instalar k3s
                shell: |
                  curl -sfL https://get.k3s.io | sh -
                args:
                  creates: /usr/local/bin/k3s

              - name: Verificar instalação
                command: k3s --version
                register: k3s_result
                changed_when: false

              - name: Mostrar resultado
                debug:
                  msg: "K3s {{ k3s_result.stdout }} instalado com sucesso!"
          EOF
          echo "📋 Playbook criado:"
          cat k3s_install.yml

      - name: Copiar arquivos para a instância EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ steps.get_ip.outputs.instance_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "ansible_hosts,k3s_install.yml"
          target: "/tmp/"
          strip_components: 1

      - name: Executar playbook Ansible
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.get_ip.outputs.instance_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo apt-get update
            sudo apt-get install -y software-properties-common
            sudo apt-add-repository --yes --update ppa:ansible/ansible
            sudo apt-get install -y ansible
            echo "📦 Versão do Ansible instalada:"
            ansible --version
            echo "📁 Arquivos no /tmp/:"
            ls -la /tmp/
            echo "🚀 Executando playbook..."
            ansible-playbook -i /tmp/ansible_hosts /tmp/k3s_install.yml

      - name: Limpeza
        if: always()
        run: |
          rm -f key.pem ansible_hosts k3s_install.yml